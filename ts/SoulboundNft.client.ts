/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Addr, InstantiateMsg, Metadata, Trait, MigrateMsg, QueryMsg } from "./SoulboundNft.types";
export interface SoulboundNftReadOnlyInterface {
  contractAddress: string;
  dynamicAttributesNftInfo: ({
    tokenId
  }: {
    tokenId: string;
  }) => Promise<DynamicAttributesNftInfoResponse>;
  nftInfo: () => Promise<NftInfoResponse>;
  config: () => Promise<ConfigResponse>;
  externalContract: () => Promise<ExternalContractResponse>;
}
export class SoulboundNftQueryClient implements SoulboundNftReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.dynamicAttributesNftInfo = this.dynamicAttributesNftInfo.bind(this);
    this.nftInfo = this.nftInfo.bind(this);
    this.config = this.config.bind(this);
    this.externalContract = this.externalContract.bind(this);
  }

  dynamicAttributesNftInfo = async ({
    tokenId
  }: {
    tokenId: string;
  }): Promise<DynamicAttributesNftInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      dynamic_attributes_nft_info: {
        token_id: tokenId
      }
    });
  };
  nftInfo = async (): Promise<NftInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nft_info: {}
    });
  };
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  externalContract = async (): Promise<ExternalContractResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      external_contract: {}
    });
  };
}
export interface SoulboundNftInterface extends SoulboundNftReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mint: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    campaignEnd,
    owner,
    pauser
  }: {
    campaignEnd?: number;
    owner?: Addr;
    pauser?: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerExternalContract: ({
    scAtomPromiseStaking
  }: {
    scAtomPromiseStaking?: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SoulboundNftClient extends SoulboundNftQueryClient implements SoulboundNftInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.registerExternalContract = this.registerExternalContract.bind(this);
  }

  mint = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    campaignEnd,
    owner,
    pauser
  }: {
    campaignEnd?: number;
    owner?: Addr;
    pauser?: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        campaign_end: campaignEnd,
        owner,
        pauser
      }
    }, fee, memo, _funds);
  };
  registerExternalContract = async ({
    scAtomPromiseStaking
  }: {
    scAtomPromiseStaking?: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_external_contract: {
        sc_atom_promise_staking: scAtomPromiseStaking
      }
    }, fee, memo, _funds);
  };
}